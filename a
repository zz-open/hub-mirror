
// var (
// 	content    = pflag.StringP("content", "", "", "原始镜像，格式为：{ \"platform\": \"\", \"hub-mirror\": [] }")
// 	maxContent = pflag.IntP("maxContent", "", 20, "原始镜像个数限制")
// 	repository = pflag.StringP("repository", "", "hub.docker.com", "推送仓库地址，默认为 hub.docker.com")
// 	username   = pflag.StringP("username", "", "", "仓库用户名")
// 	password   = pflag.StringP("password", "", "", "仓库密码")
// 	outputPath = pflag.StringP("outputPath", "", "output.sh", "结果输出路径")
// )

// var (
// 	mu sync.Mutex
// 	wg sync.WaitGroup
// )

// type HubMirrors struct {
// 	Content  []string `json:"hub-mirror"`
// 	Platform string   `json:"platform"`
// }

// func main() {
// 	import "github.com/zzopen/mysqldoc/src/internal/cmd"
// 	pflag.Parse()

// 	log.Println("验证原始镜像内容")

// 	var hubMirrors HubMirrors
// 	err := json.Unmarshal([]byte(*content), &hubMirrors)
// 	if err != nil {
// 		panic(err)
// 	}

// 	if len(hubMirrors.Content) > *maxContent {
// 		panic("提交的原始镜像个数超出了最大限制")
// 	}

// 	log.Printf("mirrors: %+v, platform: %+v\n", hubMirrors.Content, hubMirrors.Platform)

// 	log.Println("初始化 Docker 客户端")
// 	cli, err := docker.NewCli(context.Background(), *repository, *username, *password, os.Stdout)
// 	if err != nil {
// 		panic(err)
// 	}

// 	outputs := make([]*docker.Output, 0)
// 	for _, source := range hubMirrors.Content {
// 		source := source

// 		if source == "" {
// 			continue
// 		}

// 		log.Println("开始转换镜像", source)
// 		wg.Add(1)
// 		go func() {
// 			defer wg.Done()

// 			mu.Lock()
// 			defer mu.Unlock()

// 			output, err := cli.PullTagPushImage(context.Background(), source, hubMirrors.Platform)
// 			if err != nil {
// 				log.Println(source, "转换异常: ", err)
// 				return
// 			}

// 			outputs = append(outputs, output)
// 		}()
// 	}

// 	wg.Wait()

// 	if len(outputs) == 0 {
// 		panic("没有转换成功的镜像")
// 	}

// 	tmpl, err := template.New("pull_images").Parse(
// 		`{{if .Repository}}# if your repository is private,please login...
// # docker login {{ .Repository }} --username={your username}
// {{end}}
// {{- range .Outputs }}
// docker pull {{ .Target }}
// docker tag {{ .Target }} {{ .Source }}{{ end }}`)
// 	if err != nil {
// 		panic(err)
// 	}

// 	outputFile, err := os.Create(*outputPath)
// 	if err != nil {
// 		panic(err)
// 	}

// 	defer outputFile.Close()
// 	err = tmpl.Execute(outputFile, map[string]interface{}{
// 		"Outputs":    outputs,
// 		"Repository": *repository,
// 	})

// 	if err != nil {
// 		panic(err)
// 	}

// 	log.Println("SUCCESS")
// }
